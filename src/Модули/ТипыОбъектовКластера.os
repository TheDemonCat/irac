Перем ТипыОбъектов;
Перем СвойстваОбъектов;
Перем КомандыОбъектов;
Перем ВерсияУтилитыАдминистрирования;

Перем Лог;

#Область ПрограммныйИнтерфейс

Процедура УстановитьВерсиюУтилитыАдминистрирования(Знач НоваяВерсия) Экспорт

	ВерсияУтилитыАдминистрирования = НоваяВерсия;

КонецПроцедуры // УстановитьВерсиюУтилитыАдминистрирования()

Функция ВерсияУтилитыАдминистрирования() Экспорт

	Возврат ВерсияУтилитыАдминистрирования;

КонецФункции // ВерсияУтилитыАдминистрирования()

// Функция возвращает описания свойств для указанного типа объектов
//   
// Параметры:
//   ТипОбъектов        - Строка             - имя типа объектов
//
// Возвращаемое значение:
//   Массив(Структура)                       - описания свойств для типа объектов
//       *Имя                - Строка            - имя свойства объекта
//       *ИмяРАК             - Строка            - имя свойства, как оно возвращается утилитой RAC
//       *ПоУмолчанию        - Произвольный      - значение свойства объекта по умолчанию
//       *Чтение             - Булево            - Истина - значение свойства может быть прочитано;
//       *Добавление         - Булево            - Истина - значение свойства может быть установлено при добавлении;
//       *Изменение          - Булево            - Истина - значение свойства может быть установлено при изменении;
//       *ПараметрКоманды    - Строка            - строка параметра команды, как она будет использована
//                                                 при вызове команды (по умолчанию: "--<ИмяРАК>")
//   
Функция СвойстваОбъекта(Знач ТипОбъектов) Экспорт
	
	Свойства = СвойстваОбъектов.Получить(ВРег(ТипОбъектов));

	Если Свойства = Неопределено Тогда
		ВызватьИсключение СтрШаблон("Не найдено описание свойств для объектов ""%1""", ТипОбъектов);
	КонецЕсли;

	Возврат Свойства;

КонецФункции // СвойстваОбъекта()

// Функция возвращает описания команд для указанного типа объектов
//   
// Параметры:
//   ТипОбъектов        - Строка       - имя типа объектов
//
// Возвращаемое значение:
//   Структура                         - описания команд для типа объектов
//       *<Имя команды> - Строка           - Имя команды RAC
//   
Функция КомандыОбъекта(Знач ТипОбъектов) Экспорт
	
	Команды = КомандыОбъектов.Получить(ВРег(ТипОбъектов));

	Если Команды = Неопределено Тогда
		ВызватьИсключение СтрШаблон("Не найдено описание команд для объектов ""%1""", ТипОбъектов);
	КонецЕсли;

	Возврат Команды;

КонецФункции // КомандыОбъекта()

// Функция возвращает основное имя типа для указанного типа объектов
//   
// Параметры:
//   ТипОбъектов        - Строка       - имя типа объектов
//
// Возвращаемое значение:
//   Структура                         - описания команд для типа объектов
//       *<Имя команды> - Строка           - Имя команды RAC
//   
Функция ТипОбъекта(Знач ТипОбъектов) Экспорт
	
	ИмяТипа = ТипыОбъектов.Получить(ВРег(ТипОбъектов));

	Если ИмяТипа = Неопределено Тогда
		ВызватьИсключение СтрШаблон("Не найден тип объектов ""%1""", ТипОбъектов);
	КонецЕсли;

	Возврат ИмяТипа;

КонецФункции // ТипОбъекта()

#КонецОбласти // ПрограммныйИнтерфейс

#Область ПроцедурыЗаполненияСвойств

// Функция создает структуру описания свойства
//   
// Возвращаемое значение:
//   Структура                              - структура описания свойства типа объектов
//   
Функция ПолучитьСтруктуруОписанияСвойства()

	ОписаниеСвойства = Новый Структура();
	ОписаниеСвойства.Вставить("Имя"            , "");
	ОписаниеСвойства.Вставить("ИмяРАК"         , "");
	ОписаниеСвойства.Вставить("ПараметрКоманды", "");
	ОписаниеСвойства.Вставить("ПоУмолчанию"    , "");
	ОписаниеСвойства.Вставить("Чтение"         , Ложь);
	ОписаниеСвойства.Вставить("Добавление"     , Ложь);
	ОписаниеСвойства.Вставить("Изменение"      , Ложь);
	ОписаниеСвойства.Вставить("ПараметрКоманды", "");

	Возврат ОписаниеСвойства;

КонецФункции // ПолучитьСтруктуруОписанияСвойств()

// Функция заполняет и возвращает описание свойства типа объектов
//   
// Параметры:
//   Имя                - Строка                - имя свойства объекта
//   ИмяРАК             - Строка                - имя свойства, как оно возвращается утилитой RAC
//   ПоУмолчанию        - Произвольный          - значение свойства объекта по умолчанию
//   Использование      - Строка, Структура     - строка содержащая флаги использования, разделенные ","
//                                                (Чтение, Добавление, Изменение)
//                                                если указана структура, то в значении можно переопределить
//                                                имя параметра утилиты RAC
// Возвращаемое значение:
//   Структура                               - описание свойства типа объектов
//       *Имя                - Строка            - имя свойства объекта
//       *ИмяРАК             - Строка            - имя свойства, как оно возвращается утилитой RAC
//       *ПоУмолчанию        - Произвольный      - значение свойства объекта по умолчанию
//       *Чтение             - Булево            - Истина - значение свойства может быть прочитано;
//       *Добавление         - Булево            - Истина - значение свойства может быть установлено при добавлении;
//       *Изменение          - Булево            - Истина - значение свойства может быть установлено при изменении;
//       *ПараметрКоманды    - Строка            - строка параметра команды, как она будет использована
//                                                 при вызове команды (по умолчанию: "--<ИмяРАК>")
//   
Функция ПолучитьОписаниеСвойства(Знач Имя
                               , Знач ИмяРАК
	                           , Знач ПоУмолчанию = ""
	                           , Знач Использование = "Чтение")

	Если ТипЗнч(Использование) = Тип("Строка") Тогда
		Использование = Новый Структура(Использование);
		Для Каждого ТекЭлемент Из Использование Цикл
			Использование[ТекЭлемент.Ключ] = Истина;
		КонецЦикла;
	КонецЕсли;

	Если НЕ ТипЗнч(Использование) = Тип("Структура") Тогда
		Использование = Новый Структура();
	КонецЕсли;

	// Если значение начинается со спец. символа "$", то вычисляем как код
	// используется для получения значений перечислений
	Если ВРег(Лев(ПоУмолчанию, 14)) = ВРег("$Перечисления.") Тогда
		ПоУмолчанию = Перечисления.Значение(Сред(ПоУмолчанию, 15));
	КонецЕсли;

	ОписаниеСвойства = ПолучитьСтруктуруОписанияСвойства();
	ОписаниеСвойства.Имя          = Имя;
	ОписаниеСвойства.ИмяРАК       = ИмяРАК;
	ОписаниеСвойства.ПоУмолчанию  = ПоУмолчанию;
	ОписаниеСвойства.Чтение       = Использование.Свойство("Чтение");
	ОписаниеСвойства.Добавление   = Использование.Свойство("Добавление");
	ОписаниеСвойства.Изменение    = Использование.Свойство("Изменение");

	Если Использование.Свойство("ПараметрКоманды") Тогда
		ОписаниеСвойства.ПараметрКоманды = Использование.ПараметрКоманды;
	Иначе
		Если ОписаниеСвойства.Добавление ИЛИ ОписаниеСвойства.Изменение Тогда
			ОписаниеСвойства.ПараметрКоманды = "--" + ОписаниеСвойства.ИмяРАК;
		КонецЕсли;
	КонецЕсли;

	Возврат ОписаниеСвойства;

КонецФункции // ПолучитьОписаниеСвойства()

// Процедура добавляет описание свойства в массив описаний свойств
//   
// Параметры:
//   ОписаниеСвойствОбъекта  - Массив                - массив описаний свойств для добавления нового описания
//   Имя                     - Строка                - имя свойства объекта
//   СтруктураСвойства       - Структура             - структура с описанием свойства типа объектов
//       *ИмяРАК                 - Строка                - имя свойства, как оно возвращается утилитой RAC
//       *ПоУмолчанию            - Произвольный          - значение свойства объекта по умолчанию
//       *Использование          - Строка, Структура     - строка содержащая флаги использования, разделенные ","
//                                                         (Чтение, Добавление, Изменение)
//                                                         если указана структура, то в значении можно переопределить
//                                                         имя параметра утилиты RAC
//   
Процедура ДобавитьОписаниеСвойстваОбъекта(ОписаниеСвойствОбъекта, Знач Имя, Знач СтруктураСвойства)

	Если НЕ ОбъектДоступенВТекущейВерсии(ОписаниеСвойствОбъекта) Тогда
		Лог.Отладка("Версия RAC %1, свойство ""%2"" доступно начиная с версии %3",
					ВерсияУтилитыАдминистрирования,
					ОписаниеСвойствОбъекта.РежимАдминистрирования,
					МинВерсияОбъекта(ОписаниеСвойствОбъекта));
		Возврат;
	КонецЕсли;

	Если НЕ ТипЗнч(ОписаниеСвойствОбъекта) = Тип("Массив") Тогда
		ОписаниеСвойствОбъекта = Новый Массив();
	КонецЕсли;

	Если НЕ СтруктураСвойства.Свойство("ПоУмолчанию") Тогда
		СтруктураСвойства.Вставить("ПоУмолчанию", "");
	КонецЕсли;

	Если НЕ СтруктураСвойства.Свойство("Использование") Тогда
		СтруктураСвойства.Вставить("Использование", "Чтение");
	КонецЕсли;
	
	ОписаниеСвойства = ПолучитьОписаниеСвойства(Имя, 
												СтруктураСвойства.ИмяРАК,
												СтруктураСвойства.ПоУмолчанию,
												СтруктураСвойства.Использование);

	ОписаниеСвойствОбъекта.Добавить(ОписаниеСвойства);

КонецПроцедуры // ДобавитьОписаниеСвойстваОбъекта()

// Процедура добавляет описания свойств указанного типа объектов в соответствие описаний свойств
// для каждого типа объектов будут добавлены записи с ключами:
//    - <ИмяТипа>
//    - <Имя> из описания типа
//    - <РежимАдминистрирования> из описания типа
// если указаны имена родетелей, то для каждого имени родителя и типа объектов будут добавлены записи с ключами:
//    - <имя родителя>.<ИмяТипа>
//    - <имя родителя>.<Имя>
//    - <имя родителя>.<РежимАдминистрирования>
//   
// Параметры:
//   ОписаниеТипаОбъектов        - КлючИЗначение         - Ключ - имя типа объектов, как оно было загружено из макета;
//                                                         Значение - описание типа объектов, как оно было загружено из макета
//       *Имя                        - Строка                - имя типа объектов
//       *РежимАдминистрирования     - Строка                - имя режима утилиты RAC (agent, cluster, infobase и т.п.)
//       *МинВерсия                  - Строка                - версия 1С, с которой доступен указанный режим RAC
//       *Свойства                   - Структура             - структура описаний свойств типа объектов
//       *Команды                    - Структура             - структура описаний команд типа объектов
//   ИмяТипа                         - Строка            - имя типа, для которого получаем свойства
//   ИменаРодителя                   - Массив(Строка)    - имена родительского типа
//   
Процедура ДобавитьСвойстваТипаОбъектов(Знач ОписаниеТипаОбъектов
	                                 , Знач ИмяТипа
	                                 , Знач ИменаРодителя = Неопределено)

	Если НЕ ОбъектДоступенВТекущейВерсии(ОписаниеТипаОбъектов) Тогда
		Лог.Отладка("Версия RAC %1, объект ""%2"" доступен начиная с версии %3",
					ВерсияУтилитыАдминистрирования,
					ОписаниеТипаОбъектов.РежимАдминистрирования,
					МинВерсияОбъекта(ОписаниеТипаОбъектов));
		Возврат;
	КонецЕсли;

	// Соберем все возможные комбинации имен типов объектов
	ИменаТипа = Новый Массив();
	ИменаТипа.Добавить(ИмяТипа);
	ИменаТипа.Добавить(ОписаниеТипаОбъектов.Имя);
	ИменаТипа.Добавить(ОписаниеТипаОбъектов.РежимАдминистрирования);
	ИменаТипа = ПолучитьВозможныеИменаТипа(ИменаТипа, ИменаРодителя);

	ОписаниеСвойств = Новый Массив();

	Если НЕ ОписаниеТипаОбъектов.Свойство("Свойства") Тогда
		ОписаниеТипаОбъектов.Вставить("Свойства", Новый Массив());
	КонецЕсли;

	Для Каждого ТекСвойство Из ОписаниеТипаОбъектов.Свойства Цикл
		Если ТекСвойство.Значение.Свойство("РежимАдминистрирования") Тогда
			ДобавитьСвойстваТипаОбъектов(ТекСвойство.Значение, ТекСвойство.Ключ, ИменаТипа);
		Иначе
			ДобавитьОписаниеСвойстваОбъекта(ОписаниеСвойств,
											ТекСвойство.Ключ,
											ТекСвойство.Значение);
		КонецЕсли;
	КонецЦикла;

	Для Каждого ТекИмя Из ИменаТипа Цикл
		Если НЕ СвойстваОбъектов.Получить(ВРег(ТекИмя)) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		СвойстваОбъектов.Вставить(ВРег(ТекИмя), ОписаниеСвойств);
		Лог.Отладка("Добавлено описание свойств объекта: %1", ТекИмя);
	КонецЦикла;

КонецПроцедуры // ДобавитьСвойстваТипаОбъектов()

#КонецОбласти // ПроцедурыЗаполненияСвойств

#Область ПроцедурыЗаполненияКоманд

// Процедура добавляет описания команд указанного типа объектов в соответствие описаний команд
// для каждого типа объектов будут добавлены записи с ключами:
//    - <ИмяТипа>
//    - <Имя> из описания типа
//    - <РежимАдминистрирования> из описания типа
// если указаны имена родителей, то для каждого имени родителя и типа объектов будут добавлены записи с ключами:
//    - <имя родителя>.<ИмяТипа>
//    - <имя родителя>.<Имя>
//    - <имя родителя>.<РежимАдминистрирования>
//   
// Параметры:
//   ОписаниеТипаОбъектов        - КлючИЗначение         - Ключ - имя типа объектов, как оно было загружено из макета;
//                                                         Значение - описание типа объектов, как оно было загружено из макета
//       *Имя                        - Строка                - имя типа объектов
//       *РежимАдминистрирования     - Строка                - имя режима утилиты RAC (agent, cluster, infobase и т.п.)
//       *МинВерсия                  - Строка                - версия 1С, с которой доступен указанный режим RAC
//       *Свойства                   - Структура             - структура описаний свойств типа объектов
//       *Команды                    - Структура             - структура описаний команд типа объектов
//   ИмяТипа                         - Строка            - имя типа, для которого получаем команды
//   ИменаРодителя                   - Массив(Строка)    - имена родительского типа
//   
Процедура ДобавитьКомандыТипаОбъектов(Знач ОписаниеТипаОбъектов
	                                , Знач ИмяТипа
	                                , Знач ИменаРодителя = Неопределено)

	Если НЕ ОбъектДоступенВТекущейВерсии(ОписаниеТипаОбъектов) Тогда
		Лог.Отладка("Версия RAC %1, объект ""%2"" доступен начиная с версии %3",
					ВерсияУтилитыАдминистрирования,
					ОписаниеТипаОбъектов.РежимАдминистрирования,
					МинВерсияОбъекта(ОписаниеТипаОбъектов));
		Возврат;
	КонецЕсли;

	// Соберем все возможные комбинации имен типов объектов
	ИменаТипа = Новый Массив();
	ИменаТипа.Добавить(ИмяТипа);
	ИменаТипа.Добавить(ОписаниеТипаОбъектов.Имя);
	ИменаТипа.Добавить(ОписаниеТипаОбъектов.РежимАдминистрирования);
	ИменаТипа = ПолучитьВозможныеИменаТипа(ИменаТипа, ИменаРодителя);

	Если НЕ ОписаниеТипаОбъектов.Свойство("Свойства") Тогда
		ОписаниеТипаОбъектов.Вставить("Свойства", Новый Массив());
	КонецЕсли;

	Для Каждого ТекСвойство Из ОписаниеТипаОбъектов.Свойства Цикл
		Если ТекСвойство.Значение.Свойство("РежимАдминистрирования") Тогда
			ДобавитьКомандыТипаОбъектов(ТекСвойство.Значение, ТекСвойство.Ключ, ИменаТипа);
		КонецЕсли;
	КонецЦикла;

	ОписаниеКоманд = Новый Структура();

	Если НЕ ОписаниеТипаОбъектов.Свойство("Команды") Тогда
		ОписаниеТипаОбъектов.Вставить("Команды", Новый Массив());
	КонецЕсли;

	Для Каждого ТекКоманда Из ОписаниеТипаОбъектов.Команды Цикл
		Если НЕ ОбъектДоступенВТекущейВерсии(ТекКоманда) Тогда
			Лог.Отладка("Версия RAC %1, команда ""%2"" объекта ""%3"" доступна начиная с версии %4",
						ВерсияУтилитыАдминистрирования,
						ОписаниеТипаОбъектов.РежимАдминистрирования,
						МинВерсияОбъекта(ТекКоманда.Значение));
			Продолжить;
		КонецЕсли;
			ОписаниеКоманд.Вставить(ТекКоманда.Ключ, ТекКоманда.Значение.ИмяРАК);
	КонецЦикла;

	Для Каждого ТекИмя Из ИменаТипа Цикл
		Если НЕ КомандыОбъектов.Получить(ВРег(ТекИмя)) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		КомандыОбъектов.Вставить(ВРег(ТекИмя), ОписаниеКоманд);
		Лог.Отладка("Добавлено описание команд объекта: %1", ТекИмя);
	КонецЦикла;

КонецПроцедуры // ДобавитьКомандыТипаОбъектов()

#КонецОбласти // ПроцедурыЗаполненияКоманд

// Процедура добавляет описания команд указанного типа объектов в соответствие описаний команд
// для каждого типа объектов будут добавлены записи с ключами:
//    - <ИмяТипа>
//    - <Имя> из описания типа
//    - <РежимАдминистрирования> из описания типа
// если указаны имена родителей, то для каждого имени родителя и типа объектов будут добавлены записи с ключами:
//    - <имя родителя>.<ИмяТипа>
//    - <имя родителя>.<Имя>
//    - <имя родителя>.<РежимАдминистрирования>
//   
// Параметры:
//   ОписаниеТипаОбъектов        - КлючИЗначение         - Ключ - имя типа объектов, как оно было загружено из макета;
//                                                         Значение - описание типа объектов, как оно было загружено из макета
//       *Имя                        - Строка                - имя типа объектов
//       *РежимАдминистрирования     - Строка                - имя режима утилиты RAC (agent, cluster, infobase и т.п.)
//       *МинВерсия                  - Строка                - версия 1С, с которой доступен указанный режим RAC
//       *Свойства                   - Структура             - структура описаний свойств типа объектов
//       *Команды                    - Структура             - структура описаний команд типа объектов
//   ИмяТипа                         - Строка            - имя типа, для которого получаем команды
//   ИменаРодителя                   - Массив(Строка)    - имена родительского типа
//   
Процедура ДобавитьИменаТипаОбъектов(Знач ОписаниеТипаОбъектов
	                              , Знач ИмяТипа
	                              , Знач ИменаРодителя = Неопределено)

	Если НЕ ОбъектДоступенВТекущейВерсии(ОписаниеТипаОбъектов) Тогда
		Лог.Отладка("Версия RAC %1, объект ""%2"" доступен начиная с версии %3",
					ВерсияУтилитыАдминистрирования,
					ОписаниеТипаОбъектов.РежимАдминистрирования,
					МинВерсияОбъекта(ОписаниеТипаОбъектов));
		Возврат;
	КонецЕсли;

	// Соберем все возможные комбинации имен типов объектов
	ИменаТипа = Новый Массив();
	ИменаТипа.Добавить(ОписаниеТипаОбъектов.Имя);
	ИменаТипа.Добавить(ОписаниеТипаОбъектов.РежимАдминистрирования);
	ИменаТипа.Добавить(ИмяТипа);
	ИменаТипа = ПолучитьВозможныеИменаТипа(ИменаТипа, ИменаРодителя);

	Если НЕ ОписаниеТипаОбъектов.Свойство("Свойства") Тогда
		ОписаниеТипаОбъектов.Вставить("Свойства", Новый Массив());
	КонецЕсли;

	Для Каждого ТекСвойство Из ОписаниеТипаОбъектов.Свойства Цикл
		Если ТекСвойство.Значение.Свойство("РежимАдминистрирования") Тогда
			ДобавитьИменаТипаОбъектов(ТекСвойство.Значение, ТекСвойство.Ключ, ИменаТипа);
		КонецЕсли;
	КонецЦикла;

	Для Каждого ТекИмя Из ИменаТипа Цикл
		Если НЕ ТипыОбъектов.Получить(ВРег(ТекИмя)) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ТипыОбъектов.Вставить(ВРег(ТекИмя), ИменаТипа[0]);
		Лог.Отладка("Добавлено имя объекта %1: %2", ИменаТипа[0], ТекИмя);
	КонецЦикла;

КонецПроцедуры // ДобавитьИменаТипаОбъектов()

#Область Служебные

// Функция возвращает массив всех возможныех имена типа с учетом иерархии типов и альтернативных имен
// для каждого имени типа объектов и каждого имени родительского типа будут добавлены имена вида:
//    - <имя родителя>.<ИмяТипа>
// если имена родительских типов не указаны, то будет возвращен массив имен типов без изменений
//
// Параметры:
//   ИменаТипа               - Строка            - имена типа
//   ИменаРодителя           - Массив(Строка)    - имена родительского типа
//   
Функция ПолучитьВозможныеИменаТипа(ИменаТипа, ИменаРодителя = Неопределено)

	Если НЕ (ТипЗнч(ИменаРодителя) = Тип("Массив") И ИменаРодителя.Количество() > 0) Тогда
		Возврат ИменаТипа;
	КонецЕсли;

	ИменаСРодителями = Новый Массив();
	Для Каждого ТекИмяРодителя Из ИменаРодителя Цикл
		Для Каждого ТекИмя Из ИменаТипа Цикл
			ИменаСРодителями.Добавить(СтрШаблон("%1.%2", ТекИмяРодителя, ТекИмя));
		КонецЦикла;
	КонецЦикла;

	Возврат ИменаСРодителями;

КонецФункции // ПолучитьВозможныеИменаТипа

Функция МинВерсияОбъекта(Знач ОписаниеОбъекта)

	МинВерсия = "";

	Если ТипЗнч(ОписаниеОбъекта) = Тип("КлючИЗначение") Тогда
		Если ОписаниеОбъекта.Значение.Свойство("МинВерсия") Тогда
			МинВерсия = ОписаниеОбъекта.Значение.МинВерсия;
		КонецЕсли;
	ИначеЕсли ТипЗнч(ОписаниеОбъекта) = Тип("Структура") Тогда
		Если ОписаниеОбъекта.Свойство("МинВерсия") Тогда
			МинВерсия = ОписаниеОбъекта.Значение.МинВерсия;
		КонецЕсли;
	Иначе
		Возврат "";
	КонецЕсли;

	Возврат МинВерсия;

КонецФункции // МинВерсияОбъекта()

Функция ОбъектДоступенВТекущейВерсии(Знач ОписаниеОбъекта)

	Если НЕ ЗначениеЗаполнено(ВерсияУтилитыАдминистрирования) Тогда
		Возврат Истина;
	КонецЕсли;

	МинВерсия = МинВерсияОбъекта(ОписаниеОбъекта);

	Если НЕ ЗначениеЗаполнено(МинВерсия) Тогда
		Возврат Истина;
	КонецЕсли;

	Если СтроковыеФункции.СравнитьВерсии(ВерсияУтилитыАдминистрирования, МинВерсия) >= 0 Тогда
		Возврат Истина;
	КонецЕсли;

	Возврат Ложь;

КонецФункции // ОбъектДоступенВТекущейВерсии()

// Процедура заполняет описания типов объектов из макета JSON ("ТипыОбъектовКластера")
// выполняется при инициализации модуля
//
Процедура Инициализация()
	
	Лог = Логирование.ПолучитьЛог("ktb.lib.irac");

	ДанныеМакета = Служебный.ПрочитатьДанныеИзМакетаJSON("ТипыОбъектовКластера");

	ТипыОбъектов    = Новый Соответствие();
	СвойстваОбъектов = Новый Соответствие();
	КомандыОбъектов  = Новый Соответствие();

	Для Каждого ТекТип Из ДанныеМакета Цикл

		Если НЕ ОбъектДоступенВТекущейВерсии(ТекТип) Тогда
			Лог.Отладка("Версия RAC %1, объект ""%2"" доступен начиная с версии %3",
			            ВерсияУтилитыАдминистрирования,
			            ТекТип.Значение.РежимАдминистрирования,
			            МинВерсияОбъекта(ТекТип.Значение));
			Продолжить;
		КонецЕсли;

		Если НЕ ТекТип.Значение.Свойство("Свойства") Тогда
			ТекТип.Значение.Вставить("Свойства", Новый Массив());
		КонецЕсли;

		Если НЕ ТекТип.Значение.Свойство("Команды") Тогда
			ТекТип.Значение.Вставить("Команды", Новый Массив());
		КонецЕсли;

		ДобавитьИменаТипаОбъектов(ТекТип.Значение, ТекТип.Ключ);

		ДобавитьСвойстваТипаОбъектов(ТекТип.Значение, ТекТип.Ключ);

		ДобавитьКомандыТипаОбъектов(ТекТип.Значение, ТекТип.Ключ);

	КонецЦикла;

КонецПроцедуры // Инициализация()

#КонецОбласти // Служебные

Инициализация();